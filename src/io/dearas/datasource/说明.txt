要实现读写分离需要确定两点事情：
    - 根据什么来判断使用读库还是写库。(可以通过方法名、注解、或者事务的readOnly属性等来判断都可以)
    - 读库写库怎样进行实时切换。
在java SSM项目中要是写读写分离可以有两种思路：
    1. 配置两种mybatis的sqlSessionFactory,不同的sqlSessionFactory对应不同的数据源。通过配置这两个sqlSessionFactory的sql映射文件，来使mybatis自动实现读写分离。
    2. 利用Spring的AOP进行代码的横向切割。在选择声明式事务切入之前就确定好要使用的数据源。
方式一

需要确定的两点:
    1.利用sql映射文件xml来判断使用的是读库还是写库。
    2.每种不同的sqlSessionFactory对应不同的数据源，实现了数据源的切换。
缺点：代码改动较大，不易维护，不易扩展。


方式二

利用Spring的AOP实现数据源的动态切换。利用方法名上打自定义注解的方式来判断具体要使用的数据源(如：@DataSource(value="read"))，然后利用如AbstractRoutingDataSource实现数据源的切换。
Spring提供了很多实现这一需求的口，如AbstractRoutingDataSource,只要继承了AbstractRoutingDataSource，然后重写determineCurrentLookupKey方法返回数据源的名字即可动态切换数据源。
在determineCurrentLookupKey()之前就利用切面确定好数据源的名称，可以在在determineCurrentLookupKey()中操作轮询算法实现多读配置。

需要确定的两点:
    1. 利用方法名上的注解来确定是用读库还是写库。
    2. 利用Spring提供的重写AbstractRoutingDataSource的determineCurrentLookupKey方法，它返回的是配置文件中的dataSource对应的名称，然后Spring根据不同的名称选取不同的数据源。


方式三

利用Spring的AOP实现数据源的动态切换。
除了可以利用如AbstractRoutingDataSource之外还可以利用AbstractDataSource来重写getConnection()方法，来实现数据源的读写分离和动态切换。根据事务的配置，如果不是readOnly方法则使用写库，如果是readOnly的方法，再进行后续的逻辑判断。
如配置之前是写操作，则本次也使用写库进行读取。

需要确定的两点：
    1.根据事务的readOnly判断使用读库还是写库。
    2.继承AbstarctDataSource重写getConnection()方法，通过返回不同的连接来进行数据源的切换。

此方式实现过程可能比较复杂，整体流程分为以下步骤：
1、spring容器加载完成之后，把依赖注入的map中的key添加到String[] readDataSourceNames这个数组中，代表读库的名称。map中的value添加到DataSource[] readDataSources这个数组中，代表读库的具体数据源。
2、spring容器中每个bean对象被初始化完成之后(因为bean被初始化完成之后，AOP切面已经切入进去，所以可以获取到切面中的内容)：如果这个bean对象是有事务处理的则进行判断事务的类型来决定具体使用读库还是写库。
  如果是读库则把方法名添加到map中，key为方法名，value为true 表示这个方法使用读库，如果是写库则使用false。
      这个步骤最终把所有的方法名及使用的数据源类型都添加到了一个map中。当真正调用的时候根据方法名在map中查找，最后确定要使用的数据源。
3、当真正调用方法的时候AOP中的切面做的事情：根据当前的方法名判断要使用的是读库还是写库，进行一个标记。
4、因为确定数据源切入点要比事务的切入先执行(通过配置文件中的order属性进行控制)，所以在步骤3执行完毕之后，开启事务等要获取数据库连接就会调用getConnection()方法。
    因为我们又对getConnection()方法进行了重写，所以在重写getConnection()中使用具体的数据源连接池获取具体的connection。从而达到了数据库连接的切换。还可以在getConnection中用轮询算法进行多读库的使用。非常灵活。

